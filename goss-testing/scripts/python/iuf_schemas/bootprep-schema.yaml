#
# MIT License
#
# (C) Copyright 2024 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# Schema definition for the file taken as input to `sat bootprep`
---

$schema: "https://json-schema.org/draft/2020-12/schema"
# This is the version of this schema. Input files also specify their compatible
# schema with the schema_version property, described below.
#
# Only bump this version value for functional changes to the schema. E.g.,
# adding a new property requires a minor or patch version bump while clarifying
# a description of an existing field does not.
#
# Given a version number major.minor.patch, increment the ...
#
# ... major component when most common input files that were valid under the
#     old schema are invalid under the new schema
# ... minor component when some input files that were valid under the old schema
#     may be invalid under the new schema
# ... patch component when all input files that were valid under the old schema
#     are still valid under the new schema
#
version: '1.0.7'
title: Bootprep Input File
description: >
  A description of the set of CFS configurations to create, the set of IMS
  images to create and optionally customize with the defined CFS configurations,
  and the set of BOS session templates to create that reference the defined
  images and configurations.
type: object
additionalProperties: false
properties:
  schema_version:
    description: >
      The version of the bootprep input file schema used by this input file. The
      version of the schema should be a SemVer-like version number with three
      components, major.minor.patch. This will be populated with the correct
      value in input files generated by 'sat bootprep generate-example'.

      This version will be checked against the current schema version understood
      by the 'sat bootprep' command.

      Compatibility is defined as follows. Let us refer to the schema version
      specified by the bootprep input file as the "input version" and the current
      schema version used by the 'sat bootprep' command as the "current version".


      - If the input version has an older major version than the current
        version, it is incompatible.

      - If the input version has an older minor version than the current
        version, it may be incompatible, but will be accepted with a warning.

      - If the input version has an older patch version than the current
        version, it is compatible.

      - If the input version is newer than the current version, it is
        incompatible because it could contain new fields not understood by the
        current version.

      - If the input version matches the current version, it is compatible.
    default: '1.0.6'
    type: string

  configurations:
    description: The set of CFS configurations to create.
    type: array
    items:
      description: An individual CFS configuration to create.
      type: object
      required: ['name', 'layers']
      additionalProperties: false
      properties:
        name:
          description: >
            The name of the CFS configuration. This name must be unique
            in CFS.

            Supports rendering as a Jinja template.
          type: string
        description:
          description: >
            The description of the CFS configuration. This is optional.
            CFS does not support this yet, but CASMCMS-7456 will add support.
          type: string
        layers:
          description: The layers of the CFS configuration
          type: array
          items:
            oneOf:
            - description: >
                A layer of the CFS configuration defined using an explicit git
                repository URL and commit hash or branch name.
              type: object
              required: ['git']
              additionalProperties: false
              properties:
                name:
                  $ref: '#/$defs/CFSLayerName'
                playbook:
                  $ref: '#/$defs/CFSLayerPlaybook'
                special_parameters:
                  $ref: '#/$defs/CFSLayerSpecialParameters'
                git:
                  oneOf:
                  - description: >
                      Git repository URL and commit hash to use.
                    type: object
                    required: ['url', 'commit']
                    additionalProperties: false
                    properties:
                      url:
                        $ref: '#/$defs/CFSLayerGitURL'
                      commit:
                        description: The commit hash in the git repository.
                        type: string
                  - description: >
                      Git repository URL and branch to use.
                    type: object
                    required: ['url', 'branch']
                    additionalProperties: false
                    properties:
                      url:
                        $ref: '#/$defs/CFSLayerGitURL'
                      branch:
                        $ref: '#/$defs/CFSLayerBranch'

            - description: >
                A layer of the CFS configuration defined using a product's
                configuration management repository.
              type: object
              required: ['product']
              additionalProperties: false
              properties:
                name:
                  $ref: '#/$defs/CFSLayerName'
                playbook:
                  $ref: '#/$defs/CFSLayerPlaybook'
                special_parameters:
                  $ref: '#/$defs/CFSLayerSpecialParameters'
                product:
                  oneOf:
                  - description: >
                      Product name and version to define a CFS layer.
                    type: object
                    required: ['name', 'version']
                    additionalProperties: false
                    properties:
                      name:
                        $ref: '#/$defs/CFSLayerProductName'
                      version:
                        $ref: '#/$defs/CFSLayerProductVersion'
                  - description: >
                      Product name and branch to define a CFS layer.
                    type: object
                    required: ['name', 'branch']
                    additionalProperties: false
                    properties:
                      name:
                        $ref: '#/$defs/CFSLayerProductName'
                      version:
                        $ref: '#/$defs/CFSLayerProductVersion'
                      branch:
                        $ref: '#/$defs/CFSLayerBranch'
                  - description: >
                      Product name and commit to define a CFS layer.
                    type: object
                    required: ['name', 'commit']
                    additionalProperties: false
                    properties:
                      name:
                        $ref: '#/$defs/CFSLayerProductName'
                      version:
                        $ref: '#/$defs/CFSLayerProductVersion'
                      commit:
                        description: The commit hash in the product's git repository.
                        type: string
        additional_inventory:
          oneOf:
          - description: Additional inventory to include in the CFS configuration
            type: object
            required: [url, branch]
            properties:
              name:
                $ref: '#/$defs/CFSAdditionalInventoryName'
              url:
                $ref: '#/$defs/CFSAdditionalInventoryURL'
              branch:
                description: The branch of the given repository to use.
                type: string
          - description: Additional inventory to include in the CFS configuration
            type: object
            required: [url, commit]
            properties:
              name:
                $ref: '#/$defs/CFSAdditionalInventoryName'
              url:
                $ref: '#/$defs/CFSAdditionalInventoryURL'
              commit:
                description: The commit of the given repository to use.
                type: string


  images:
    description: The images to create and customize.
    type: array
    items:
      oneOf:
      - description: An image to create and/or customize.
        type: object
        required: ['name', 'base']
        dependentRequired:
          configuration: ['configuration_group_names']
        additionalProperties: false
        properties:
          name:
            $ref: '#/$defs/ImageName'
          ref_name:
            type: string
            description: >
              A name for this image that can be used to refer to this image from other images
              and session templates defined in this file. This name must be unique amongst all
              other images in the input file.
            examples: ['compute-image', 'uan-image']
          description:
            $ref: '#/$defs/ImageDescription'
          base:
            oneOf:
            - type: object
              required: ['ims']
              additionalProperties: false
              properties:
                ims:
                  oneOf:
                  - type: object
                    required: ['name', 'type']
                    additionalProperties: false
                    properties:
                      name:
                        description: >
                          The name of the base image or recipe. Note that IMS does not
                          ensure names of images or recipes are unique. If the given name
                          is not unique, it must be specified by id instead.
                        type: string
                      type:
                        $ref: '#/$defs/ImageBaseType'
                  - type: object
                    required: ['id', 'type']
                    additionalProperties: false
                    properties:
                      id:
                        description: >
                          The id of the image or recipe.
                        type: string
                      type:
                        $ref: '#/$defs/ImageBaseType'
            - type: object
              required: ['product']
              additionalProperties: false
              properties:
                product:
                  type: object
                  required: ['name', 'type']
                  additionalProperties: false
                  properties:
                    name:
                      type: string
                      description: >
                        The name of the product providing the image or recipe to use as a base
                        when creating this image.
                    version:
                      type: string
                      description: >
                        The version of the product providing the image or recipe to use as a base
                        when creating this image. If omitted, use the latest version of the product.

                        Supports rendering as a Jinja template.
                    type:
                      $ref: '#/$defs/ImageBaseType'
                    filter:
                      type: object
                      description: >
                        Filter the image or recipe to use from the given version of the given product
                        in case this product provides more than one image or recipe and one must be
                        selected. If more than one filter is given (e.g. wildcard and arch), the base
                        image or recipe must match all given filters.
                      minProperties: 1
                      additionalProperties: false
                      properties:
                        prefix:
                          type: string
                          description: >
                            A prefix that must match the beginning of the name of an image or recipe
                            from the given version of the given product. If there are multiple matches,
                            or if there are no matches, it is an error.

                            Supports rendering as a Jinja template.
                        wildcard:
                          type: string
                          description: >
                            A string using glob-style wildcards which must match the name of an image
                            or recipe from the given version of the given product. If there are multiple
                            matches, or if there are no matches, it is an error.

                            Supports rendering as a Jinja template.
                          minLength: 1
                        arch:
                          type: string
                          description: >
                            The architecture of the image in IMS. If there are multiple matches, or if there
                            are no matches, it is an error.

                            Supports rendering as a Jinja template.
                          minLength: 1
                          examples: ['aarch64', 'x86_64']
            - type: object
              required: ['image_ref']
              additionalProperties: false
              properties:
                image_ref:
                  type: string
                  description: >
                    A reference to another image from this file to use as a base when creating this
                    image. The value specified here should match the value of the "ref_name" property
                    of another image.
          configuration:
            $ref: '#/$defs/ImageConfiguration'
          configuration_group_names:
            $ref: '#/$defs/ImageConfigurationGroupNames'
      # Once json-schema-for-humans supports `deprecated`, remove HTML from `description`
      - description: >
          <h3>Deprecation Notice</h3>
          The top-level "ims" property has been deprecated. Use the "ims" property
          beneath the new top-level "base" property. Note also that the "is_recipe"
          property in that new location is replaced by a "type" property.

          <h3>Description</h3>
          An image to create and/or customize from an existing IMS recipe or image.
        # Mark this entire alternative as deprecated, but note that this `deprecated`
        # property is not supported by json-schema-for-humans yet.
        deprecated: true
        type: object
        required: ['name', 'ims']
        dependentRequired:
          configuration: ['configuration_group_names']
        additionalProperties: false
        properties:
          name:
            $ref: '#/$defs/ImageName'
          description:
            $ref: '#/$defs/ImageDescription'
          ims:
            oneOf:
            - description: An IMS image or image recipe specified by name.
              type: object
              required: ['is_recipe', 'name']
              additionalProperties: false
              properties:
                is_recipe:
                  $ref: '#/$defs/IMSIsRecipe'
                name:
                  description: >
                    The name of the image or recipe depending on the value of
                    is_recipe above. Note that IMS does not ensure names of
                    images or recipes are unique. If the given name is not
                    unique, an error will be reported to the user, and they
                    will have to specify it by id instead.
                  type: string
            - description: An IMS image or image recipe specified by id.
              type: object
              required: ['is_recipe', 'id']
              additionalProperties: false
              properties:
                is_recipe:
                  $ref: '#/$defs/IMSIsRecipe'
                id:
                  description: >
                    The id of the image or recipe depending on the value of
                    is_recipe above. IMS does ensure that this id is unique.
                  type: string
          configuration:
            $ref: '#/$defs/ImageConfiguration'
          configuration_group_names:
            $ref: '#/$defs/ImageConfigurationGroupNames'

  session_templates:
    description: The BOS session templates to create.
    type: array
    items:
      description: A BOS session template to create.
      type: object
      required: ['name', 'image', 'configuration', 'bos_parameters']
      additionalProperties: false
      properties:
        name:
          description: >
            The name of the session template to create. This is the name
            the session template will have in BOS.

            Supports rendering as a Jinja template.
          type: string
        image:
          oneOf:
          - description: The IMS image to use in the BOS session template.
            type: object
            additionalProperties: false
            required: ['ims']
            properties:
              ims:
                oneOf:
                - type: object
                  required: ['name']
                  additionalProperties: false
                  properties:
                    name:
                      description: >
                        The name of an image in IMS. Note that names are not
                        required to be unique in IMS. If more than one image
                        exists with this name, the image must be specified by
                        ID.
                      type: string
                - type: object
                  required: ['id']
                  additionalProperties: false
                  properties:
                    id:
                      description: >
                        The id of an image in IMS.
                      type: string
          - description: The IMS image from this file to use in the BOS session template.
            type: object
            additionalProperties: false
            required: ['image_ref']
            properties:
              image_ref:
                type: string
                description: >
                  A reference to an image from this file to use in the BOS session
                  template. The value specified here should match the value of the
                  "ref_name" property of an image in this file.

          - description: >
              <h3>Deprecation Notice</h3>
              Specifying a simple string here is deprecated. Instead, specify
              an object with one of the supported properties, "ims" or "image_ref".

              <h3>Description</h3>
              The image to use from IMS. This will first be treated as the name
              of an IMS image. If multiple images with this name exist, then an
              error will be reported. If it is not the name of an IMS image, and
              it takes the form of a UUID, then it will be treated as an IMS
              image ID. If it is neither a valid IMS image name nor a valid IMS
              image ID, then an error will be reported.

              This image will be used to boot the nodes in this session template.
              The s3 path to the manifest.json file will be determined from the
              IMS image, and it will be populated in the "path" key in the boot
              set(s) within the session template.

              Supports rendering as a Jinja template.
            type: string
            # Mark this entire alternative as deprecated, but note that this `deprecated`
            # property is not supported by json-schema-for-humans yet.
            deprecated: true
        configuration:
          description: >
            The name of the CFS configuration that will be applied to the
            nodes in this session template after they have been booted.

            Supports rendering as a Jinja template.
          type: string
        bos_parameters:
          description: >
            The parameters specified here will be passed through to BOS.
          required: ['boot_sets']
          type: object
          properties:
            boot_sets:
              description: >
                BOS boot sets are defined here and support all the same
                properties as in BOS itself. The main difference is that
                some properties of the BOS boot sets are automatically
                populated, including the etag, path, and type, which are
                all determined from the built IMS image.
              type: object
              # There should be at least one boot_set defined
              minProperties: 1
              # This will apply the following schema to the values of all
              # possible properties within this boot_sets object, which will
              # be the individual boot sets.
              additionalProperties:
                description: A boot set within the session template.
                type: object
                properties:
                  arch:
                    description: >
                      The architecture of the nodes that should be targeted by this
                      boot set. The valid values accepted by BOS are the same as the
                      valid values in the components array returned by the Hardware
                      State Manager (HSM) API's /State/Components endpoint.

                      If omitted, BOS will treat this as a boot set targeting nodes
                      with architecture X86. This is done to preserve functionality
                      of BOS session templates which were created prior to the addition
                      of multi-architecture support in BOS.
                    type: string
                    enum: ['X86', 'ARM', 'Other', 'Unknown']
                    default: 'X86'
                  kernel_parameters:
                    description: >
                      Starting in CSM 1.0, which is to be released in Shasta v1.5,
                      kernel parameters can be specified in the IMS image. They are
                      stored in a file listed in the image manifest. Kernel parameters
                      specified in the BOS session template will be appended to the
                      list of kernel parameters from the image.
                    type: string
                  node_list:
                    description: Individual nodes to boot in the boot set.
                    type: array
                    items:
                      description: A node xname.
                      type: string
                  node_roles_groups:
                    description: Roles to boot in the boot set.
                    type: array
                    items:
                      description: A node role.
                      type: string
                  node_groups:
                    description: Groups to boot in the boot set.
                    type: array
                    items:
                      description: A node group name.
                      type: string
                  rootfs_provider:
                    description: >
                      The root file system provider.
                    type: string
                    example: cpss3
                  rootfs_provider_passthrough:
                    description: >
                      Additional parameters that will be appended to the
                      'rootfs=<protocol>' kernel parameter.
                    type: string

# Definitions that are used elsewhere in this schema.
$defs:
  CFSLayerName:
    description: >
      The name of this layer. CFS does not require that each layer
      of a configuration have a name, so this is optional.

      Supports rendering as a Jinja template.
    type: string
  CFSLayerPlaybook:
    description: >
      The name of the playbook file to execute in this layer. This
      is optional. If omitted, the playbook will not be specified
      in the CFS configuration layer, and CFS will default to looking
      for a playbook named site.yml.
    type: string
    # Note that there is no default. Instead, we let CFS provide the default
  CFSLayerBranch:
    description: >
      The branch of the git repository. This can be either
      converted to a commit hash before creating the
      configurations, or it can optionally be passed
      directly to CFS by passing the `--no-resolve-branches`
      option to `sat bootprep`. In the latter instance, when
      the CFS configuration is created, CFS determines the
      commit hash for the HEAD of this branch and stores
      both the branch name and commit hash in the layer of
      the configuration. CFS can use the branch name to
      update the commit hash to the latest HEAD of the
      branch if requested.

      Supports rendering as a Jinja template.
    type: string
  CFSLayerGitURL:
    description: >
      The URL to the git repository which contains the Ansible content
      for a CFS layer.
    type: string
  CFSLayerProductName:
    description: >
      The name of the product supplying the config management
      git repository.
    type: string
  CFSLayerProductVersion:
    description: >
      The version of the product supplying the git repo. If the
      user specifies the special value "latest", then the latest
      version will be used.

      Supports rendering as a Jinja template.
    type: string
  CFSLayerSpecialParameters:
    type: object
    additionalProperties: false
    properties:
      ims_require_dkms:
        description: >
          If true, any image customization sessions that use this configuration will
          enable DKMS in IMS.
        type: boolean
        default: false
  CFSAdditionalInventoryName:
    type: string
    description: >
      The name of the additional inventory. Specifying a name for the
      additional inventory is optional.
  CFSAdditionalInventoryURL:
    type: string
    description: >
      The URL to the git repository which contains the additional Ansible inventory.
  ImageName:
    description: >
      The name of the image that will be created in IMS. The image name
      must be unique in IMS even though IMS does not enforce unique names.
      This is required to allow reference to the image by name in the
      session_templates section.

      If the image name is not unique in IMS, this command will fail and
      will not create another IMS image with this name.

      Supports rendering as a Jinja template.
    type: string
  ImageDescription:
    description: >
      The description of the image. This is optional and is not currently
      stored in the resulting IMS image.
    type: string
  IMSIsRecipe:
    description: >
      If true, then this is an IMS recipe to be built into an IMS image.
      If false, then this is a IMS image that has already been built.
    type: boolean
  ImageConfiguration:
    description: >
      The name of the configuration to use for customizing the image
      prior to boot. This is optional. If omitted, the image will
      not be customized. If present, a value must be provided for
      configuration_group_names.

      Supports rendering as a Jinja template.
    type: string
  ImageConfigurationGroupNames:
    description: >
      The name of the Ansible groups to set up in the CFS session when
      customizing the image. Required if the "configuration" field is
      present.
    type: array
    items:
      description: >
        The name of the Ansible group to create within the CFS image
        customization session. The group will have as its member the
        IMS image customization container for the given IMS image.
      type: string
  ImageBaseType:
    description: >
      The type of the base to start from when creating this image. If "recipe",
      then the base image will be built from the specified recipe. If "image",
      then the given image will be used as a base for configuration.
    type: string
    enum: ["recipe", "image"]