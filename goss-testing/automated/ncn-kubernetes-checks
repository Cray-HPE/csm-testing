#!/usr/bin/env bash
#
# MIT License
#
# (C) Copyright 2021-2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# GOSS_BASE isn't set by default on the NCNs, just on LiveCD
[[ -z ${GOSS_BASE} ]] && export GOSS_BASE=/opt/cray/tests/install/ncn

export GOSS_LOG_BASE_DIR=/opt/cray/tests/install/logs

source "${GOSS_BASE}/automated/run-ncn-tests.sh"

# file needed to run from livecd
kube_creds=/root/.kube/config

# is_pit_node is defined in run-ncn-tests.sh
if is_pit_node; then
  # running on a pit node
  echo $'\e[1;33m'PIT Node Kubernetes Checks$'\e[0m'
  echo $'\e[1;33m'--------------------------$'\e[0m'
  if [[ -f ${kube_creds} ]]; then
    # run livecd local Kubernetes cluster tests
    k8s_local_tests
  else
    # We preface this warning with 'Total Tests:' to make it more visible, because the install documentation
    # has the user grep for that string to review the results of the tests.
    echo $'\e[1;31m'Total Tests: WARNING: Unable to run local Kubernetes checks because ${kube_creds} does not exist$'\e[0m'
    echo
  fi
else
  # run tests from an ncn
  echo $'\e[1;33m'Kubernetes Cluster Node Checks$'\e[0m'
  echo $'\e[1;33m'------------------------------$'\e[0m'
  k8s_local_tests
fi

# master nodes
echo $'\e[1;33m'Master Node Kubernetes Checks$'\e[0m'
echo $'\e[1;33m'-----------------------------$'\e[0m'

# The get_ncns function is defined in run-ncn-tests.sh
if nodes=$(get_ncns --masters --exclude-pit); then

	# The get_ncns function should always give NCNs if its return code was 0, but better safe than sorry
	if [[ -z ${nodes} ]]; then
		print_error "No master NCNs found"
	else
		# Query the server endpoints
		for node in ${nodes} ; do
			run_ncn_tests "${node}" "ncn-kubernetes-tests-master"
			if ! is_pit_node ; then
				run_ncn_tests "${node}" "ncn-afterpitreboot-kubernetes-tests-master"
			fi
		done
	fi

fi

echo

# worker nodes
echo $'\e[1;33m'Worker Node Kubernetes Checks$'\e[0m'
echo $'\e[1;33m'-----------------------------$'\e[0m'

# The get_ncns function is defined in run-ncn-tests.sh
if nodes=$(get_ncns --workers); then

	# The get_ncns function should always give NCNs if its return code was 0, but better safe than sorry
	if [[ -z ${nodes} ]]; then
		print_error "No worker NCNs found"
	else
		# Query the server endpoints
		for node in ${nodes} ; do
			run_ncn_tests "${node}" "ncn-kubernetes-tests-worker"
			if ! is_pit_node ; then
				run_ncn_tests "${node}" "ncn-afterpitreboot-kubernetes-tests-worker"
			fi
		done
	fi

fi

exit
