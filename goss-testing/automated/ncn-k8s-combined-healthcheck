#!/usr/bin/env bash
#
# MIT License
#
# (C) Copyright 2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# This is intended to be a combination of the following two scripts:
# ncn-healthcheck
# ncn-kubernetes-checks

# Many functions and variables used in this script are defined/set/exported
# in the run-ncn-tests.sh library

echo $'\e[1;33m'NCN and Kubernetes Checks$'\e[0m'
echo $'\e[1;33m'------------------------------$'\e[0m'
echo

# The run-ncn-tests.sh library is located in the same directory as the
# current script. Using dirname like this could produce a relative path,
# but that's fine, since we just want to source this library script.
# Note that this method is not infallible -- in particular, some symbolic
# links can mess it up. But that won't be the case if this was installed
# with the csm-testing RPM.
source "$(dirname -- "$0")/run-ncn-tests.sh"

# Get master and worker node lists (storage node list is created inside the ncn_healthcheck_storage_urls function)
master_nodes=$(get_ncns --masters --exclude-pit) || exit 1
worker_nodes=$(get_ncns --workers) || exit 1

# Add k8s master test URLs
test_urls=$(k8s_check_urls_for_master_nodelist ${master_nodes}) || exit 1

# Add k8s worker test URLs
more_test_urls=$(k8s_check_urls_for_worker_nodelist ${worker_nodes}) || exit 1
test_urls+=" ${more_test_urls}"

# Add master NCN healthcheck URLs
more_test_urls=$(healthcheck_urls_for_master_nodelist ${master_nodes}) || exit 1
test_urls+=" ${more_test_urls}"

# Add storage NCN healthcheck URLs
more_test_urls=$(ncn_healthcheck_storage_urls) || exit 1
test_urls+=" ${more_test_urls}"

# Add worker NCN healthcheck URLs
more_test_urls=$(healthcheck_urls_for_worker_nodelist ${worker_nodes}) || exit 1
test_urls+=" ${more_test_urls}"

if is_pit_node ; then
    # running on a pit node

    # file needed to run from livecd
    kube_creds=/root/.kube/config

    if is_nonempty_file "${kube_creds}"; then
        # run livecd local Kubernetes cluster tests plus the NCN worker BGP test
        run_goss_tests_print_results suites/common-combined-k8s-bgp-tests.yaml ${test_urls}
        rc=$?
    else
        echo
        echo $'\e[1;31m'WARNING: Unable to run local Kubernetes checks because ${kube_creds} does not exist or is invalid$'\e[0m'
        # But we are still able to run the BGP test that the NCN worker healthcheck runs
        run_goss_tests_print_results tests/goss-switch-bgp-neighbor-aruba-or-mellanox.yaml ${test_urls}
        rc=$?
    fi
else
    # running on an NCN

	# run NCN local Kubernetes cluster tests plus the NCN worker BGP test
    run_goss_tests_print_results suites/ncn-combined-k8s-bgp-tests.yaml ${test_urls}
    rc=$?
fi

# This script does not exit with non-0 return code just for test failures
[[ $rc -le 1 ]] && exit 0
exit 1
