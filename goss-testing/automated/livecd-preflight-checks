#!/usr/bin/env bash
#
# MIT License
#
# (C) Copyright 2021-2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

set -e

# This script is run on the PIT node during CSM installs before management
# nodes are deployed.

# GOSS_BASE should already be set on the PIT node, but just in case we
# will set it here
[[ -z $GOSS_BASE ]] && export GOSS_BASE="/opt/cray/tests/install/livecd"

export GOSS_LOG_BASE_DIR=/opt/cray/tests/install/logs

# Print an error message and exit
function err_exit
{
    echo "ERROR: $*"
    exit 1
}

# Validates that a file exists and is a regular file
function file_exists
{
    [[ -e "$1" ]] || err_exit "File does not exist: $1"
    [[ -f "$1" ]] || err_exit "File exists but is not a regular file: $1"
}

export GOSS_FILE="$GOSS_BASE/suites/livecd-preflight-tests.yaml"
vars_file="$GOSS_BASE/vars/variables-livecd.yaml"
dnsmasq_statics=/etc/dnsmasq.d/statics.conf

file_exists "$GOSS_FILE"
file_exists "$vars_file"
file_exists "$dnsmasq_statics"

nodes=$(grep -ohE 'ncn-[msw]([0-9]{3})' "$dnsmasq_statics" | awk '!a[$0]++')
tmpvars=/tmp/goss-variables-$(date +%s)-temp.yaml

# Add node names from statics.conf to temp variables file.
# We expect there to be at least 9 nodes (3 each of masters,
# storage, and workers).
num_nodes=$(echo $nodes | wc -w)
if [[ $num_nodes -ge 9 ]];then
  echo "nodes:" >> $tmpvars
  for node in $nodes; do
    echo "  - $node" >> $tmpvars    
  done
  echo "" >> $tmpvars
elif [[ $num_nodes -eq 0 ]]; then
  err_exit "Node names could not be found in $dnsmasq_statics file!"
else
  err_exit "Only $num_nodes node name(s) found in $dnsmasq_statics file!"
fi
cat $vars_file >> $tmpvars

echo $'\e[1;33m'Running LiveCD preflight checks \(may take a few minutes to complete\)...$'\e[0m'

# Run the LiveCD preflight Goss test suite
export GOSS_VARS=$tmpvars
set +e
results=$(/usr/bin/goss validate -f json)
set -e

if ! `echo $results | jq -e > /dev/null 2>&1`; then
  err_exit $'\e[1;31m'Output not valid JSON$'\e[0m'
fi

echo $results | jq -c '.results | sort_by(.result) | .[]' | while read -r test; do
  result=$(echo $test | jq -r '.result')

  if [ -z $result ]; then
    continue
  elif [ $result == 0 ]; then
    result=PASS
    echo $'\e[1;32m'
  else
    result=FAIL
    echo $'\e[1;31m'
  fi

  title=$(echo $test | jq -r '.title')
  description=$(echo $test | jq -r '.meta.desc')
  severity=$(echo $test | jq -r '.meta.sev')
  summary=$(echo $test | jq -r '."summary-line"')
  time=$(echo $test | jq -r '.duration')
  time=$(echo "scale=8; $time/1000000000" | bc | awk '{printf "%.8f\n", $0}')

  echo "Result: $result"
  echo "Test Name: $title"
  echo "Description: $description"
  echo "Severity: $severity"
  echo "Test Summary: $summary"
  echo "Execution Time: $time seconds"
  echo "Node: ncn-m001"
done

echo $'\e[0m'

total=$(echo $results | jq -r '.summary."test-count"')
failed=$(echo $results | jq -r '.summary."failed-count"')
time=$(echo $results | jq -r '.summary."total-duration"')
time=$(echo "scale=4; $time/1000000000" | bc | awk '{printf "%.4f\n", $0}')

echo "Total Tests: $total, Total Passed: $((total-failed)), Total Failed: $failed, Total Execution Time: $time seconds"
echo

if [[ $total -eq 0 ]]; then
    err_exit "No tests were run!"
elif [[ $failed -ne 0 ]]; then
    err_exit "Not all tests passed"
fi
echo "All tests passed!"
exit 0
