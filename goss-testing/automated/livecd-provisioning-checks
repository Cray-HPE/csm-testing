#!/usr/bin/env bash
#
# (C) Copyright 2021 Hewlett Packard Enterprise Development LP.
# Author: Forrest Jadick
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

export GOSS_FILE="/opt/cray/tests/install/livecd/suites/livecd-provisioning-tests.yaml"
vars_file="/opt/cray/tests/install/livecd/vars/variables-livecd.yaml"

nodes=$(cat /etc/dnsmasq.d/statics.conf | grep -ohE 'ncn-[m,w,s]([0-9]{3})' | awk '!a[$0]++')
tmpvars=/tmp/goss-variables-$(date +%s)-temp.yaml

# add node names from statics.conf to temp variables file
if [ `echo $nodes | wc -w` -ne 0 ];then
  echo "nodes:" >> $tmpvars
  for node in $nodes; do
    echo "  - $node" >> $tmpvars
    echo "" >> $tmpvars
  done
else
  echo "Node names could not be found in statics.conf file! Exiting now."
  exit 1
fi
cat $vars_file >> $tmpvars

echo $'\e[1;33m'Running LiveCD provisioning checks \(may take a few minutes to complete\)...$'\e[0m'

# Run the LiveCD provisioning Goss test suite
export GOSS_VARS=$tmpvars
results=$(/usr/bin/goss validate -f json)

if ! `echo $results | jq -e > /dev/null 2>&1`; then
  echo $'\e[1;31m'ERROR: Output not valid JSON$'\e[0m'
  exit 1
fi

echo $results | jq -c '.results | sort_by(.result) | .[]' | while read -r test; do
  result=$(echo $test | jq -r '.result')

  if [ -z $result ]; then
    continue
  elif [ $result == 0 ]; then
    result=PASS
    echo $'\e[1;32m'
  else
    result=FAIL
    echo $'\e[1;31m'
  fi

  title=$(echo $test | jq -r '.title')
  description=$(echo $test | jq -r '.meta.desc')
  severity=$(echo $test | jq -r '.meta.sev')
  summary=$(echo $test | jq -r '."summary-line"')
  time=$(echo $test | jq -r '.duration')
  time=$(echo "scale=8; $time/1000000000" | bc | awk '{printf "%.8f\n", $0}')

  echo "Result: $result"
  echo "Test Name: $title"
  echo "Description: $description"
  echo "Severity: $severity"
  echo "Test Summary: $summary"
  echo "Execution Time: $time seconds"
  echo "Node: ncn-m001"
done

echo $'\e[0m'

total=$(echo $results | jq -r '.summary."test-count"')
failed=$(echo $results | jq -r '.summary."failed-count"')
time=$(echo $results | jq -r '.summary."total-duration"')
time=$(echo "scale=4; $time/1000000000" | bc | awk '{printf "%.4f\n", $0}')

echo "Total Tests: $total, Total Passed: $((total-failed)), Total Failed: $failed, Total Execution Time: $time seconds"

exit