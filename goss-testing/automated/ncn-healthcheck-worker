#!/usr/bin/env bash
#
# MIT License
#
# (C) Copyright 2021-2022 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# GOSS_BASE isn't set by default on the NCNs, just on LiveCD
[[ -z ${GOSS_BASE} ]] && export GOSS_BASE="/opt/cray/tests/install/ncn"

export GOSS_LOG_BASE_DIR=/opt/cray/tests/install/logs

vars_file="${GOSS_BASE}/vars/variables-ncn.yaml"

source "${GOSS_BASE}/automated/run-ncn-tests.sh"

echo $'\e[1;33m'NCN Run-Time Checks$'\e[0m'
echo $'\e[1;33m'-------------------$'\e[0m'

# The get_ncns function is defined in run-ncn-tests.sh
if nodes=$(get_ncns --workers); then

	# The get_ncns function should always give NCNs if its return code was 0, but better safe than sorry
	if [[ -z ${nodes} ]]; then
		print_error "No worker NCNs found"
	else
		# Query the server endpoints
		for node in ${nodes} ; do
			run_ncn_tests "${node}" "ncn-healthcheck-worker"
			if ! is_pit_node ; then
				run_ncn_tests "${node}" "ncn-afterpitreboot-healthcheck-worker"
			fi
		done
	fi

fi

# Specify the switch passwords and call the switch BGP neighbors tests.
# This only needs to be done once on the NCN that this script is
# executing on as the BGP status tests check all switches in
# the cluster.
# If explicit Aruba or Mellanox switch passwords were not provided, then go with SW_ADMIN_PASSWORD
if [[ -z ${SW_ADMIN_PASSWORD} ]]; then
	echo "ERROR Management switch admin password must be provided via the SW_ADMIN_PASSWORD enviroment varaible"
	echo "Example: export SW_ADMIN_PASSWORD='changeme'"
	exit 1
fi

# The create_tmpvars_file function is defined in run-ncn-tests.sh
# It creates the temporary variables file and saves the path to it in the ${tmpvars} variable
create_tmpvars_file "${vars_file}" || exit 1

echo $'\n\e[1;33m'---------------$'\e[0m'
echo $'\e[1;33m'Switch BGP Neighbors$'\e[0m'
echo "Test Name: goss-switch-bgp-neighbor-aruba-or-mellanox.yaml"
echo "Description: Validates connection to the BGP neighbors of a switch. Check Admin Guide \"Check BGP Status and Reset Sessions\" for more details on how to fix this issue."
goss -g "${GOSS_BASE}/tests/goss-switch-bgp-neighbor-aruba-or-mellanox.yaml" --vars "${tmpvars}" validate --format documentation
exit $?
