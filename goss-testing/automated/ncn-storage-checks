#!/usr/bin/env bash
#
# (C) Copyright 2021-2022 Hewlett Packard Enterprise Development LP.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# GOSS_BASE isn't set by default on the NCNs, just on LiveCD
[[ -z $GOSS_BASE ]] && export GOSS_BASE="/opt/cray/tests/install/ncn"

# Temporary file to store command output
NCN_STORAGE_CHECKS_TMPFILE=/tmp/.ncn-storage-checks.tmp.$$.$RANDOM

source $GOSS_BASE/automated/run-ncn-tests.sh

echo $'\e[1;33m'Storage Node Automated Tests$'\e[0m'
echo $'\e[1;33m'----------------------------$'\e[0m'

# find the storage node names and query the server endpoint
for FAKELOOP in 1 
do
    if ! command -v ceph &> /dev/null
    then
        echo "ceph command not found"
    else
        echo "ceph command found"
        if ! ceph status -f json-pretty > ${NCN_STORAGE_CHECKS_TMPFILE} 2>&1
        then
            echo "Command failed: ceph status -f json-pretty"
        elif ! mons=$(jq -r '.quorum_names[]' ${NCN_STORAGE_CHECKS_TMPFILE})
        then
            echo "Unexpected format from command: ceph status -f json-pretty"
        else
            # Make sure we got at least one NCN name
            ncns=( $mons )
            if [[ ${#ncns[@]} -gt 0 ]]
            then
                echo "Obtained storage node name list from: ceph status"
                break
            fi
            echo "Unable to find node names in output of ceph status -f json-pretty"
        fi
    fi

    if ! command -v kubectl &> /dev/null
    then
        echo "kubectl command not found"
    else
        echo "kubectl command found"
        if ! kubectl get cm ceph-csi-config -o json > ${NCN_STORAGE_CHECKS_TMPFILE} 2>&1
        then
            echo "Command failed: kubectl get cm ceph-csi-config -o json"
        elif ! jq -r '.data[]' ${NCN_STORAGE_CHECKS_TMPFILE} > ${NCN_STORAGE_CHECKS_TMPFILE}.2 2>&1
        then
            echo "Unexpected format from command: kubectl get cm ceph-csi-config -o json"
        elif ! jq -r '.[].monitors[]' ${NCN_STORAGE_CHECKS_TMPFILE}.2 > ${NCN_STORAGE_CHECKS_TMPFILE} 2>&1
        then
            echo "Unexpected 'data' field format in output of command: kubectl get cm ceph-csi-config -o json"
        else
            # Make sure we got at least one NCN name
            ncns=( $mons )
            if [[ ${#ncns[@]} -gt 0 ]]
            then
                echo "Obtained storage node name list from: kubectl get cm ceph-csi-config"
                break
            fi
            echo "Unable to find node names in output of kubectl get cm ceph-csi-config -o json"
        fi
    fi
    
    echo "Using default list of storage NCNs"
    mons="ncn-s001 ncn-s002 ncn-s003"
done
echo -n "List of storage NCNs: "
echo $mons

# Remove the temporary file(s), if they exist
rm -f ${NCN_STORAGE_CHECKS_TMPFILE} ${NCN_STORAGE_CHECKS_TMPFILE}.2 >& /dev/null

(( counter=0 ))

for node in $mons; do
    nodename=$(echo $node|cut -d":" -f1)
    echo "$counter: Checking $nodename"
    if [[ $(nc -z -w 10 $node 22) ]] || [[ $counter -lt 3 ]]
    then
        run_ncn_tests "$nodename" "8997" "ncn-storage-tests"
        exit $?
    elif [[ $counter -ge 3 ]]
    then
        break
    else
        (( counter+1 ))
    fi
done

echo "Unable to perform test due to missing command or unable to access ceph monitor nodes"
exit 1