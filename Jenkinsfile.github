@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "csm-testing"
        DESCRIPTION = "CSM automated testing"
        IS_STABLE = getBuildIsStable()
        BUILD_METADATA = getRpmRevision(isStable: env.IS_STABLE)
    }

    stages {
        stage("Prepare") {
            steps {
                sh "make rpm_prepare"
            }
        }

        stage("Build RPM 1") {
            steps {
                sh "make build-csm-testing"
            }
        }

        stage("Build RPM 2") {
            steps {
                sh "make build-goss-servers"
            }
        }

        stage('Publish ') {
            steps {
                script {
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", arch: "noarch", isStable: env.IS_STABLE)
                    publishCsmRpms(component: env.NAME, pattern: "dist/rpmbuild/RPMS/*.rpm", arch: "src", isStable: env.IS_STABLE)
                    publishCsmRpms(component: "goss-servers", pattern: "dist/rpmbuild/RPMS/x86_64/*.rpm", arch: "noarch", isStable: env.IS_STABLE)
                    publishCsmRpms(component: "goss-servers", pattern: "dist/rpmbuild/RPMS/*.rpm", arch: "src", isStable: env.IS_STABLE)
                }
            }
        }
    }
}